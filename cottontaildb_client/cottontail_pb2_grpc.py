# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cottontaildb_client import cottontail_pb2 as cottontaildb__client_dot_cottontail__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class DDLStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListSchemas = channel.unary_stream(
                '/org.vitrivr.cottontail.grpc.DDL/ListSchemas',
                request_serializer=cottontaildb__client_dot_cottontail__pb2.ListSchemaMessage.SerializeToString,
                response_deserializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
                )
        self.CreateSchema = channel.unary_unary(
                '/org.vitrivr.cottontail.grpc.DDL/CreateSchema',
                request_serializer=cottontaildb__client_dot_cottontail__pb2.CreateSchemaMessage.SerializeToString,
                response_deserializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
                )
        self.DropSchema = channel.unary_unary(
                '/org.vitrivr.cottontail.grpc.DDL/DropSchema',
                request_serializer=cottontaildb__client_dot_cottontail__pb2.DropSchemaMessage.SerializeToString,
                response_deserializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
                )
        self.ListEntities = channel.unary_stream(
                '/org.vitrivr.cottontail.grpc.DDL/ListEntities',
                request_serializer=cottontaildb__client_dot_cottontail__pb2.ListEntityMessage.SerializeToString,
                response_deserializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
                )
        self.EntityDetails = channel.unary_unary(
                '/org.vitrivr.cottontail.grpc.DDL/EntityDetails',
                request_serializer=cottontaildb__client_dot_cottontail__pb2.EntityDetailsMessage.SerializeToString,
                response_deserializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
                )
        self.CreateEntity = channel.unary_unary(
                '/org.vitrivr.cottontail.grpc.DDL/CreateEntity',
                request_serializer=cottontaildb__client_dot_cottontail__pb2.CreateEntityMessage.SerializeToString,
                response_deserializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
                )
        self.DropEntity = channel.unary_unary(
                '/org.vitrivr.cottontail.grpc.DDL/DropEntity',
                request_serializer=cottontaildb__client_dot_cottontail__pb2.DropEntityMessage.SerializeToString,
                response_deserializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
                )
        self.TruncateEntity = channel.unary_unary(
                '/org.vitrivr.cottontail.grpc.DDL/TruncateEntity',
                request_serializer=cottontaildb__client_dot_cottontail__pb2.TruncateEntityMessage.SerializeToString,
                response_deserializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
                )
        self.OptimizeEntity = channel.unary_unary(
                '/org.vitrivr.cottontail.grpc.DDL/OptimizeEntity',
                request_serializer=cottontaildb__client_dot_cottontail__pb2.OptimizeEntityMessage.SerializeToString,
                response_deserializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
                )
        self.CreateIndex = channel.unary_unary(
                '/org.vitrivr.cottontail.grpc.DDL/CreateIndex',
                request_serializer=cottontaildb__client_dot_cottontail__pb2.CreateIndexMessage.SerializeToString,
                response_deserializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
                )
        self.DropIndex = channel.unary_unary(
                '/org.vitrivr.cottontail.grpc.DDL/DropIndex',
                request_serializer=cottontaildb__client_dot_cottontail__pb2.DropIndexMessage.SerializeToString,
                response_deserializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
                )
        self.RebuildIndex = channel.unary_unary(
                '/org.vitrivr.cottontail.grpc.DDL/RebuildIndex',
                request_serializer=cottontaildb__client_dot_cottontail__pb2.RebuildIndexMessage.SerializeToString,
                response_deserializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
                )


class DDLServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListSchemas(self, request, context):
        """Lists all schemas. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSchema(self, request, context):
        """Creates a new schema. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropSchema(self, request, context):
        """Drops an existing schema. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListEntities(self, request, context):
        """Lists all available entities for the given schema. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EntityDetails(self, request, context):
        """Returns details about the given entity. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateEntity(self, request, context):
        """* Creates a new entity. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropEntity(self, request, context):
        """* Drops an existing entity. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TruncateEntity(self, request, context):
        """* Truncates an existing entity. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OptimizeEntity(self, request, context):
        """Optimizing and truncating entities. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateIndex(self, request, context):
        """* Creates a new index. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropIndex(self, request, context):
        """* Drops an existing index. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RebuildIndex(self, request, context):
        """* Rebuilds an existing index. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DDLServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListSchemas': grpc.unary_stream_rpc_method_handler(
                    servicer.ListSchemas,
                    request_deserializer=cottontaildb__client_dot_cottontail__pb2.ListSchemaMessage.FromString,
                    response_serializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.SerializeToString,
            ),
            'CreateSchema': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSchema,
                    request_deserializer=cottontaildb__client_dot_cottontail__pb2.CreateSchemaMessage.FromString,
                    response_serializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.SerializeToString,
            ),
            'DropSchema': grpc.unary_unary_rpc_method_handler(
                    servicer.DropSchema,
                    request_deserializer=cottontaildb__client_dot_cottontail__pb2.DropSchemaMessage.FromString,
                    response_serializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.SerializeToString,
            ),
            'ListEntities': grpc.unary_stream_rpc_method_handler(
                    servicer.ListEntities,
                    request_deserializer=cottontaildb__client_dot_cottontail__pb2.ListEntityMessage.FromString,
                    response_serializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.SerializeToString,
            ),
            'EntityDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.EntityDetails,
                    request_deserializer=cottontaildb__client_dot_cottontail__pb2.EntityDetailsMessage.FromString,
                    response_serializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.SerializeToString,
            ),
            'CreateEntity': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateEntity,
                    request_deserializer=cottontaildb__client_dot_cottontail__pb2.CreateEntityMessage.FromString,
                    response_serializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.SerializeToString,
            ),
            'DropEntity': grpc.unary_unary_rpc_method_handler(
                    servicer.DropEntity,
                    request_deserializer=cottontaildb__client_dot_cottontail__pb2.DropEntityMessage.FromString,
                    response_serializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.SerializeToString,
            ),
            'TruncateEntity': grpc.unary_unary_rpc_method_handler(
                    servicer.TruncateEntity,
                    request_deserializer=cottontaildb__client_dot_cottontail__pb2.TruncateEntityMessage.FromString,
                    response_serializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.SerializeToString,
            ),
            'OptimizeEntity': grpc.unary_unary_rpc_method_handler(
                    servicer.OptimizeEntity,
                    request_deserializer=cottontaildb__client_dot_cottontail__pb2.OptimizeEntityMessage.FromString,
                    response_serializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.SerializeToString,
            ),
            'CreateIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateIndex,
                    request_deserializer=cottontaildb__client_dot_cottontail__pb2.CreateIndexMessage.FromString,
                    response_serializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.SerializeToString,
            ),
            'DropIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.DropIndex,
                    request_deserializer=cottontaildb__client_dot_cottontail__pb2.DropIndexMessage.FromString,
                    response_serializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.SerializeToString,
            ),
            'RebuildIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.RebuildIndex,
                    request_deserializer=cottontaildb__client_dot_cottontail__pb2.RebuildIndexMessage.FromString,
                    response_serializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.vitrivr.cottontail.grpc.DDL', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DDL(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListSchemas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/org.vitrivr.cottontail.grpc.DDL/ListSchemas',
            cottontaildb__client_dot_cottontail__pb2.ListSchemaMessage.SerializeToString,
            cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateSchema(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.vitrivr.cottontail.grpc.DDL/CreateSchema',
            cottontaildb__client_dot_cottontail__pb2.CreateSchemaMessage.SerializeToString,
            cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DropSchema(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.vitrivr.cottontail.grpc.DDL/DropSchema',
            cottontaildb__client_dot_cottontail__pb2.DropSchemaMessage.SerializeToString,
            cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListEntities(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/org.vitrivr.cottontail.grpc.DDL/ListEntities',
            cottontaildb__client_dot_cottontail__pb2.ListEntityMessage.SerializeToString,
            cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EntityDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.vitrivr.cottontail.grpc.DDL/EntityDetails',
            cottontaildb__client_dot_cottontail__pb2.EntityDetailsMessage.SerializeToString,
            cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateEntity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.vitrivr.cottontail.grpc.DDL/CreateEntity',
            cottontaildb__client_dot_cottontail__pb2.CreateEntityMessage.SerializeToString,
            cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DropEntity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.vitrivr.cottontail.grpc.DDL/DropEntity',
            cottontaildb__client_dot_cottontail__pb2.DropEntityMessage.SerializeToString,
            cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TruncateEntity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.vitrivr.cottontail.grpc.DDL/TruncateEntity',
            cottontaildb__client_dot_cottontail__pb2.TruncateEntityMessage.SerializeToString,
            cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OptimizeEntity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.vitrivr.cottontail.grpc.DDL/OptimizeEntity',
            cottontaildb__client_dot_cottontail__pb2.OptimizeEntityMessage.SerializeToString,
            cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.vitrivr.cottontail.grpc.DDL/CreateIndex',
            cottontaildb__client_dot_cottontail__pb2.CreateIndexMessage.SerializeToString,
            cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DropIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.vitrivr.cottontail.grpc.DDL/DropIndex',
            cottontaildb__client_dot_cottontail__pb2.DropIndexMessage.SerializeToString,
            cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RebuildIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.vitrivr.cottontail.grpc.DDL/RebuildIndex',
            cottontaildb__client_dot_cottontail__pb2.RebuildIndexMessage.SerializeToString,
            cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DMLStub(object):
    """*
    Endpoint for data management (INSERT, UPDATE and DELETE).
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Insert = channel.unary_unary(
                '/org.vitrivr.cottontail.grpc.DML/Insert',
                request_serializer=cottontaildb__client_dot_cottontail__pb2.InsertMessage.SerializeToString,
                response_deserializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
                )
        self.InsertBatch = channel.unary_unary(
                '/org.vitrivr.cottontail.grpc.DML/InsertBatch',
                request_serializer=cottontaildb__client_dot_cottontail__pb2.BatchInsertMessage.SerializeToString,
                response_deserializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
                )
        self.Update = channel.unary_unary(
                '/org.vitrivr.cottontail.grpc.DML/Update',
                request_serializer=cottontaildb__client_dot_cottontail__pb2.UpdateMessage.SerializeToString,
                response_deserializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
                )
        self.Delete = channel.unary_unary(
                '/org.vitrivr.cottontail.grpc.DML/Delete',
                request_serializer=cottontaildb__client_dot_cottontail__pb2.DeleteMessage.SerializeToString,
                response_deserializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
                )


class DMLServicer(object):
    """*
    Endpoint for data management (INSERT, UPDATE and DELETE).
    """

    def Insert(self, request, context):
        """* Inserts data into an entity. Each INSERT returns a record with a status. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertBatch(self, request, context):
        """* Inserts data into an entity in batches! InsertMessages are collected until Cottontail DBs cache is saturated and then persisted in one go. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """* Updates data in an entity. Each UPDATE returns a record with a status. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """* Deletes data from an entity. Each DELETE returns a record with a status. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DMLServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Insert': grpc.unary_unary_rpc_method_handler(
                    servicer.Insert,
                    request_deserializer=cottontaildb__client_dot_cottontail__pb2.InsertMessage.FromString,
                    response_serializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.SerializeToString,
            ),
            'InsertBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertBatch,
                    request_deserializer=cottontaildb__client_dot_cottontail__pb2.BatchInsertMessage.FromString,
                    response_serializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=cottontaildb__client_dot_cottontail__pb2.UpdateMessage.FromString,
                    response_serializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=cottontaildb__client_dot_cottontail__pb2.DeleteMessage.FromString,
                    response_serializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.vitrivr.cottontail.grpc.DML', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DML(object):
    """*
    Endpoint for data management (INSERT, UPDATE and DELETE).
    """

    @staticmethod
    def Insert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.vitrivr.cottontail.grpc.DML/Insert',
            cottontaildb__client_dot_cottontail__pb2.InsertMessage.SerializeToString,
            cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InsertBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.vitrivr.cottontail.grpc.DML/InsertBatch',
            cottontaildb__client_dot_cottontail__pb2.BatchInsertMessage.SerializeToString,
            cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.vitrivr.cottontail.grpc.DML/Update',
            cottontaildb__client_dot_cottontail__pb2.UpdateMessage.SerializeToString,
            cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.vitrivr.cottontail.grpc.DML/Delete',
            cottontaildb__client_dot_cottontail__pb2.DeleteMessage.SerializeToString,
            cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DQLStub(object):
    """*
    Endpoint for data management (SELECT).
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Explain = channel.unary_stream(
                '/org.vitrivr.cottontail.grpc.DQL/Explain',
                request_serializer=cottontaildb__client_dot_cottontail__pb2.QueryMessage.SerializeToString,
                response_deserializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
                )
        self.Query = channel.unary_stream(
                '/org.vitrivr.cottontail.grpc.DQL/Query',
                request_serializer=cottontaildb__client_dot_cottontail__pb2.QueryMessage.SerializeToString,
                response_deserializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
                )
        self.Ping = channel.unary_unary(
                '/org.vitrivr.cottontail.grpc.DQL/Ping',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class DQLServicer(object):
    """*
    Endpoint for data management (SELECT).
    """

    def Explain(self, request, context):
        """* Evaluates and returns the execution plan for a query. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Query(self, request, context):
        """* Executes a query through Cottontail DB. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """* Pings the endpoint 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DQLServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Explain': grpc.unary_stream_rpc_method_handler(
                    servicer.Explain,
                    request_deserializer=cottontaildb__client_dot_cottontail__pb2.QueryMessage.FromString,
                    response_serializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.SerializeToString,
            ),
            'Query': grpc.unary_stream_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=cottontaildb__client_dot_cottontail__pb2.QueryMessage.FromString,
                    response_serializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.vitrivr.cottontail.grpc.DQL', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DQL(object):
    """*
    Endpoint for data management (SELECT).
    """

    @staticmethod
    def Explain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/org.vitrivr.cottontail.grpc.DQL/Explain',
            cottontaildb__client_dot_cottontail__pb2.QueryMessage.SerializeToString,
            cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/org.vitrivr.cottontail.grpc.DQL/Query',
            cottontaildb__client_dot_cottontail__pb2.QueryMessage.SerializeToString,
            cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.vitrivr.cottontail.grpc.DQL/Ping',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TXNStub(object):
    """*
    Endpoint for transaction management.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Begin = channel.unary_unary(
                '/org.vitrivr.cottontail.grpc.TXN/Begin',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=cottontaildb__client_dot_cottontail__pb2.Metadata.FromString,
                )
        self.Commit = channel.unary_unary(
                '/org.vitrivr.cottontail.grpc.TXN/Commit',
                request_serializer=cottontaildb__client_dot_cottontail__pb2.Metadata.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.Rollback = channel.unary_unary(
                '/org.vitrivr.cottontail.grpc.TXN/Rollback',
                request_serializer=cottontaildb__client_dot_cottontail__pb2.Metadata.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.Kill = channel.unary_unary(
                '/org.vitrivr.cottontail.grpc.TXN/Kill',
                request_serializer=cottontaildb__client_dot_cottontail__pb2.Metadata.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ListTransactions = channel.unary_stream(
                '/org.vitrivr.cottontail.grpc.TXN/ListTransactions',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
                )
        self.ListLocks = channel.unary_stream(
                '/org.vitrivr.cottontail.grpc.TXN/ListLocks',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
                )


class TXNServicer(object):
    """*
    Endpoint for transaction management.
    """

    def Begin(self, request, context):
        """* Starts a new transaction. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Commit(self, request, context):
        """* Performs a commit on a transaction. This method blocks if a query is currently executed. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Rollback(self, request, context):
        """* Performs a rollback on a transaction and aborts it. This method blocks if a query is currently executed. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Kill(self, request, context):
        """* Kills and performs a rollback on an ongoing transaction. This method can even be used when a query is being executed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTransactions(self, request, context):
        """* Lists all active transactions. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListLocks(self, request, context):
        """* Lists all active locks on database objects. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TXNServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Begin': grpc.unary_unary_rpc_method_handler(
                    servicer.Begin,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=cottontaildb__client_dot_cottontail__pb2.Metadata.SerializeToString,
            ),
            'Commit': grpc.unary_unary_rpc_method_handler(
                    servicer.Commit,
                    request_deserializer=cottontaildb__client_dot_cottontail__pb2.Metadata.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Rollback': grpc.unary_unary_rpc_method_handler(
                    servicer.Rollback,
                    request_deserializer=cottontaildb__client_dot_cottontail__pb2.Metadata.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Kill': grpc.unary_unary_rpc_method_handler(
                    servicer.Kill,
                    request_deserializer=cottontaildb__client_dot_cottontail__pb2.Metadata.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ListTransactions': grpc.unary_stream_rpc_method_handler(
                    servicer.ListTransactions,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.SerializeToString,
            ),
            'ListLocks': grpc.unary_stream_rpc_method_handler(
                    servicer.ListLocks,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.vitrivr.cottontail.grpc.TXN', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TXN(object):
    """*
    Endpoint for transaction management.
    """

    @staticmethod
    def Begin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.vitrivr.cottontail.grpc.TXN/Begin',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            cottontaildb__client_dot_cottontail__pb2.Metadata.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.vitrivr.cottontail.grpc.TXN/Commit',
            cottontaildb__client_dot_cottontail__pb2.Metadata.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Rollback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.vitrivr.cottontail.grpc.TXN/Rollback',
            cottontaildb__client_dot_cottontail__pb2.Metadata.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Kill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.vitrivr.cottontail.grpc.TXN/Kill',
            cottontaildb__client_dot_cottontail__pb2.Metadata.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/org.vitrivr.cottontail.grpc.TXN/ListTransactions',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListLocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/org.vitrivr.cottontail.grpc.TXN/ListLocks',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            cottontaildb__client_dot_cottontail__pb2.QueryResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
